"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkproof_of_liability_demo"] = self["webpackChunkproof_of_liability_demo"] || []).push([["scripts_index_js"],{

/***/ "./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/***/ (() => {

eval("\n\nconst graphColor = ['#0E1766','#710BC2','#F63AAC','#d281d2', '#7aa0cb', '#d281d2','#000000','#F6EBFF'];\n\nconst $tableID = $('#maintable-table');\n$tableID.on('click', '.table-remove', function () { \n  $(this).parents('tr').detach(); \n  buildTree();\n\n});\n$tableID.on('click', '.table-up', function () {\n  const $row = $(this).parents('tr');\n  if ($row.index() === 0) { return; } $row.prev().before($row.get(0));\n});\n\n$(document).on(\"keyup\", '#maintable-table tr td', function (e) {\n  // $('#maintable-table tr td').on(\"keydown\", function(){\n  const row = $(this).parents('tr');\n  var userId = row.children('.user-id').text().toLowerCase();\n  var amount = row.children('.user-amount').text();\n  let digest = sha256(userId + '|' + amount);\n\n  row.children('.user-commitment').text(digest);\n\n  buildTree();\n});\n\nbuildTree();\n\n$tableID.on('click', '.table-down', function () {\n  const $row = $(this).parents('tr');\n  $row.next().after($row.get(0));\n});\n\n$(\"#btn-add-user\").click(function () {\n  var toAppend = '<tr>';\n  toAppend += '<td class=\"pt-3-half user-id\" contenteditable=\"true\">user_id</td>';\n  toAppend += '<td class=\"pt-3-half user-amount\" contenteditable=\"true\">0</td>';\n  toAppend += '<td class=\"pt-3-half user-commitment\">commitment</td>';\n  toAppend += '<td><span class=\"table-remove\"><button type=\"button\" class=\"btn btn-danger btn-rounded btn-sm my-0\">Remove</button></span></td>';\n  toAppend += '</tr>';\n\n  $(\"#users_table\").append(toAppend);\n});\n\n\nfunction buildTree() {\n\n  let usersArr = tableUsersToArray();\n  \n  let treeArr = usersArrToUsersTreeArr(usersArr);\n\n  updateVerifyPage(usersArr, treeArr);\n\n  let diagramData = treeArrToTreeData(treeArr);\n\n  buildDiagram(diagramData, \"merkle-graph\", \"graph\", true);\n\n  buildDiagram(diagramData, \"merkle-graph-verifer\", \"graph-b\", false);\n}\n\nfunction tableUsersToArray() {\n  // table to array object\n  var convertedIntoArray = [];\n  $(\"table#users_table tbody tr\").each(function () {\n    var rowData = {};\n    var actualData = $(this).find('td');\n    if (actualData.length > 0) {\n      actualData.each(function () {\n        if ($(this).hasClass(\"user-id\")) {\n          rowData.userId = $(this).text();\n        } else if ($(this).hasClass(\"user-amount\")) {\n          rowData.amount = Number($(this).text());\n        } else if ($(this).hasClass(\"user-commitment\")) {\n          rowData.commitment = $(this).text();\n        }\n      });\n\n      convertedIntoArray.push(rowData);\n    }\n  });\n\n  return convertedIntoArray;\n}\n\nfunction updateVerifyPage(convertedIntoArray, treeArr){\n  fillVerifyUserSelect(convertedIntoArray);\n  updateVerficationRootValue(treeArr[0].commitment);\n\n}\n\nfunction fillVerifyUserSelect(usersArr) {\n  var select = document.getElementById(\"user-verify-select\");\n\n  var i, L = select.options.length - 1;\n  for (i = L; i >= 0; i--) {\n    select.remove(i);\n  }\n\n  var el = document.createElement(\"option\");\n  el.textContent = \"Choose a User\";\n  el.value = \"\";\n  el.hidden = true;\n  el.disabled = true;\n  el.selected = true;\n  select.appendChild(el);\n\n  for (var i = 0; i < usersArr.length; i++) {\n    var opt = usersArr[i].userId;\n    el = document.createElement(\"option\");\n    el.textContent = opt;\n    el.value = opt;\n    select.appendChild(el);\n  }\n}\n\nfunction updateVerficationRootValue(rootCommitment) {\n  $('#published-root-text').text(rootCommitment);\n}\n\nfunction usersArrToUsersTreeArr(records) {\n\n  // build leaf level \n  let leafLevelLength = 1;\n  for (; leafLevelLength < records.length; leafLevelLength = leafLevelLength * 2) { }\n\n  let leafLevel = [];\n\n  for (let i = 0; i < leafLevelLength; i++) {\n\n    if (i < records.length) {\n      leafLevel.push({ commitment: records[i].commitment, amount: records[i].amount });\n    } else {\n      leafLevel.push({ commitment: sha256(\"\"), amount: 0 });\n    }\n  }\n\n  let levels = [];\n  levels.push(leafLevel);\n\n  let currLevel = leafLevel\n  for (; currLevel.length > 1;) {\n\n    let nextLevel = [];\n    for (let i = 1; i < currLevel.length; i = i + 2) {\n      let amountsSum = currLevel[i - 1].amount + currLevel[i].amount;\n      let nextItem = { commitment: sha256(amountsSum + currLevel[i - 1].commitment + currLevel[i].commitment), amount: amountsSum };\n      nextLevel.push(nextItem);\n    }\n\n    levels.push(nextLevel);\n    currLevel = nextLevel;\n  }\n\n  let res = [];\n  for (let i = levels.length; i >= 0; i--) {\n    res.push.apply(res, levels[i]);\n  }\n\n  return res;\n}\n\nfunction getNodeParnetOtherChild(node) {\n  let cmmt = node.data.commitment;\n  let parent = node.parent.data;\n\n  let firstChild = parent.children[0];\n  let secondChild = parent.children[1];\n\n  if (cmmt === firstChild.commitment) {\n    return secondChild;\n  } else {\n    return firstChild;\n  }\n}\n\nfunction expandAllNodesInVerifyGraph() {\n  let rootCommitment = document.getElementById(\"published-root-text\");\n  let rootNode = d3.select('graph-b .node[node-name=\"'+ rootCommitment.innerText + '\"]');\n  rescurisveExpand(rootNode.datum());\n}\n\nfunction rescurisveExpand(node) {\n  if (!node.children) {\n    collapseNodeOnGraphB(node.data.commitment.trim());\n  }\n\n  if (node.children) {\n    rescurisveExpand(node.children[0]);\n    rescurisveExpand(node.children[1]);\n  }\n\n}\n\nfunction collapseNodeOnGraphB(cmmt) {\n  $('#merkle-graph-verifer [node-name=\"'+ cmmt.trim() + '\"]').parent()[0].dispatchEvent(new Event('click'));\n}\n\n$(\"#user-verify-select\").on('change', function() {\n  let cmmt = computeCommitmentAndPopulate(this.value); updateGraphB(cmmt);\n});\n\nfunction computeCommitmentAndPopulate(userId) {\n  const trs = $('#users_table > tbody > tr');\n\n  let isFound = false;\n  let commitment = '';\n  let amount = 0;\n\n  for (let i = 0; i < trs.length; i++) {\n    let ele = $(trs[i])\n    if (ele.find(\"td:eq(0)\").text() == userId) {\n      isFound = true;\n      amount = ele.find(\"td:eq(1)\").text().trim();\n      commitment = ele.find(\"td:eq(2)\").text().trim();\n    }\n  }\n\n  if (isFound == true) {\n    let rowDiv = $('#verify-commitment-compution').html('');\n\n    const formulaDiv = document.createElement(\"div\");\n    formulaDiv.classList.add(\"col-md-9\");\n    formulaDiv.innerHTML = '<p id =\"commitment-eq\">\\\\(commitment_{user} = sha256(Id_{user} | balance_{user}) = sha256(' + userId + ' | ' + amount + ')\\\\)' + \n    '<p id =\"commitment-eq-2\">\\\\(commitment_{user} = ' + commitment + '\\\\)';\n\n    const externalVerifyDiv = document.createElement(\"div\");\n    externalVerifyDiv.classList.add(\"col-md-3\");\n\n    // const verifyBtn = document.createElement(\"button\");\n    // verifyBtn.classList.add(\"btn\");\n    // verifyBtn.classList.add(\"btn-info\");\n    // verifyBtn.textContent = \"Verify externally\";\n    // verifyBtn.onclick = function() {VerifyCommitmentExternally(userId,amount)};\n    // externalVerifyDiv.append(verifyBtn);\n    rowDiv.append(formulaDiv);\n    rowDiv.append(externalVerifyDiv);\n\n    MathJax.typeset(['#commitment-eq', '#commitment-eq-2']);\n  } else {\n    alert('error - cant find user name on the users table');\n    return \"\";\n  }\n\n  return commitment;\n}\n\nfunction VerifyCommitmentExternally(uName, amount) {\n  window.open('https://md5calc.com/hash/sha256/' + uName + '|' + amount);\n}\n\nfunction updateGraphB(cmmt) {\n  expandAllNodesInVerifyGraph();\n\n  let currNode = d3.select('.node[node-name=\"'+ cmmt.trim() + '\"]').datum();\n\n    while (currNode.parent) {\n      collapseNodeOnGraphB(getNodeParnetOtherChild(currNode).commitment.trim());\n      currNode = currNode.parent;\n    }\n\n}\n\nfunction treeArrToTreeData(array) {\n  let level = 0;\n  let idx = 1;\n  let res = { name: array[idx - 1].amount.toString(), fill: graphColor[level], subname: shortHash(array[level].commitment), commitment: array[idx - 1].commitment };\n  res.children = [];\n  // left child\n\n  let left = recursivee(idx + 1, level + 1, array);\n  if (left) {\n    res.children.push(left);\n  }\n\n  // right child\n  let right = recursivee(idx + 2, level + 1, array);\n  if (right) {\n    res.children.push(right);\n  }\n  return res;\n}\n\nfunction recursivee(idx, level, array) {\n  if (idx > array.length) {\n    return \"\";\n  }\n\n  let res = { name: array[idx - 1].amount.toString(), fill: graphColor[level], subname: shortHash(array[idx - 1].commitment), commitment: array[idx - 1].commitment };\n  res.children = [];\n\n  // left child\n  let left = recursivee(idx * 2, level + 1, array);\n  if (left) {\n    res.children.push(left);\n  }\n\n  // right child\n  let right = recursivee((idx * 2) + 1, level + 1, array);\n  if (right) {\n    res.children.push(right);\n  }\n\n  return res;\n}\n\nfunction buildDiagram(treeData, deployToComponenetId, deployToComponenetType, isCollapsedAtInit) {\n  const myNode = document.getElementById(deployToComponenetId);\n  myNode.innerHTML = '';\n\n  // Set the dimensions and margins of the diagram\n  var margin = { top: 20, right: 90, bottom: 30, left: 90 },\n    width = 960 - margin.left - margin.right,\n    height = 700;\n\n  // var svg = d3.select(\"graph\").append(\"svg\")\n  var svg = d3.select(deployToComponenetType).append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\"\n      + margin.left + \",\" + margin.top + \")\");\n\n  var i = 0,\n    duration = 750,\n    root;\n\n  // declares a tree layout and assigns the size\n  var treemap = d3.tree().size([height, width]);\n\n  // Assigns parent, children, height, depth\n  root = d3.hierarchy(treeData, function (d) { return d.children; });\n  root.x0 = height / 2;\n  root.y0 = 0;\n\n  // Collapse after the second level\n  if (isCollapsedAtInit == true) {\n    root.children.forEach(collapse);\n  }\n\n  update(root);\n\n  // Collapse the node and all it's children\n  function collapse(d) {\n    if (d.children) {\n      d._children = d.children\n      d._children.forEach(collapse)\n      d.children = null\n    }\n  }\n\n  function update(source) {\n\n    // Assigns the x and y position for the nodes\n    var treeData = treemap(root);\n\n    // Compute the new tree layout.\n    var nodes = treeData.descendants(),\n      links = treeData.descendants().slice(1);\n\n    // Normalize for fixed-depth.\n    nodes.forEach(function (d) { d.y = d.depth * 180 });\n\n    // Update the nodes...\n    var node = svg.selectAll('g.node')\n      .data(nodes, function (d) { return d.id || (d.id = ++i); });\n\n    // Enter any new modes at the parent's previous position.\n    var nodeEnter = node.enter().append('g')\n      .attr('class', 'node')\n      .attr(\"transform\", function (d) {\n        return \"translate(\" + source.x0 + \",\" + source.y0 + \")\";\n      })\n      .on('click', click);\n\n    var rectHeight = 60, rectWidth = 60;\n\n    nodeEnter.append('circle')\n      .attr('class', 'node')\n      .attr(\"x\", 0)\n      .attr(\"stroke\", \"grey\")\n      .attr(\"r\", 44)\n      .attr(\"cy\", 30)\n      .attr(\"cx\", 30)\n      .attr(\"stroke-width\", \"2px\")\n      .attr('node-name', d => d.data.commitment.trim())\n      .style(\"fill\", function (d) {\n        return d.data.fill;\n      });\n\n    // Add labels for the nodes\n    nodeEnter.append('text')\n      .attr(\"dy\", \"20px\")\n      .attr(\"x\", function (d) {\n        return 23;\n      })\n      \n      .text(function (d) { return d.data.name; })\n      .append(\"tspan\")\n      .attr(\"dy\", \"30px\")\n      .attr(\"x\", function (d) {\n        return 0;\n      })\n      .text(function (d) { return d.data.subname; })\n      .attr(\"x\", function (d) {\n        return 3;\n      });\n\n    // UPDATE\n    var nodeUpdate = nodeEnter.merge(node);\n\n    // Transition to the proper position for the node\n    nodeUpdate.transition()\n      .duration(duration)\n      .attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n    // Update the node attributes and style\n    // nodeUpdate.select('circle.node')\n    //   .attr('r', 10)\n    //   .style(\"fill\", function (d) {\n    //     return d._children ? \"lightsteelblue\" : \"#fff\";\n    //   })\n    //   .attr('cursor', 'pointer');\n\n\n    // Remove any exiting nodes\n    var nodeExit = node.exit().transition()\n      .duration(duration)\n      .attr(\"transform\", function (d) {\n        return \"translate(\" + source.x + \",\" + source.y + \")\";\n      })\n      .remove();\n\n    // On exit reduce the node circles size to 0\n    nodeExit.select('circle')\n      .attr('r', 1e-6);\n\n    // On exit reduce the opacity of text labels\n    nodeExit.select('text')\n      .style('fill-opacity', 1e-6);\n\n    // ****************** links section ***************************\n\n    // Update the links...\n    var link = svg.selectAll('path.link')\n      .data(links, function (d) { return d.id; });\n\n    // Enter any new links at the parent's previous position.\n    var linkEnter = link.enter().insert('path', \"g\")\n      .attr(\"class\", \"link\")\n      .attr('d', function (d) {\n        var o = { x: source.x0, y: source.y0 }\n        return diagonal(o, o)\n      });\n\n    // UPDATE\n    var linkUpdate = linkEnter.merge(link);\n\n    // Transition back to the parent element position\n    linkUpdate.transition()\n      .duration(duration)\n      .attr('d', function (d) { return diagonal(d, d.parent) });\n\n    // Remove any exiting links\n    var linkExit = link.exit().transition()\n      .duration(duration)\n      .attr('d', function (d) {\n        var o = { x: source.x, y: source.y }\n        return diagonal(o, o)\n      })\n      .remove();\n\n    // Store the old positions for transition.\n    nodes.forEach(function (d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n\n    // Creates a curved (diagonal) path from parent to the child nodes\n    function diagonal(s, d) {\n\n      let path = `M ${s.x + (rectWidth / 2)} ${s.y}\n          C ${(s.x + d.x) / 2 + (rectWidth / 2)} ${s.y},\n            ${(s.x + d.x) / 2 + (rectWidth / 2)} ${d.y},\n            ${d.x + (rectWidth / 2)} ${d.y}`\n\n      return path\n    }\n\n    // Toggle children on click.\n    function click(d) {\n      if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      } else {\n        d.children = d._children;\n        d._children = null;\n      }\n      update(d);\n    }\n  }\n}\n\nfunction shortHash(hash) {\n  let trimmedHash = hash.trim();\n  let first = trimmedHash.substring(0, 3);\n  let last = trimmedHash.substring(trimmedHash.length - 3);\n  let res = first + '...' + last;\n\n  return res;\n}\n\n\n//# sourceURL=webpack://proof-of-liability-demo/./scripts/index.js?");

/***/ })

}]);